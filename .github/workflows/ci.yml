name: CI
on: [push, pull_request]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        options: >-
          --health-cmd="pg_isready -U postgres -d app_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      # Database connection for tests
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/app_test?sslmode=disable
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: app_test
      DB_SCHEMA: public

    steps:
      - uses: actions/checkout@v4

      # Set up Go
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # Set up Node.js for frontend tests
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Wait until healthy (extra guard)
      - name: Wait for Postgres
        run: |
          for i in {1..60}; do
            pg_isready -h localhost -p 5432 -U postgres -d app_test && break
            sleep 1
          done

      # Run migrations
      - name: Run migrations
        run: |
          cd apps/backend
          CONFIG_PATH=configs/development.yaml go run cmd/migrate/main.go up

      # Run backend tests
      - name: Test Backend
        env:
          CONFIG_PATH: configs/development.yaml
        run: |
          cd apps/backend
          go test ./... -count=1 -v

      # Install frontend dependencies and run tests
      - name: Install frontend dependencies
        run: |
          cd apps/frontend
          npm ci

      - name: Test Frontend
        run: |
          cd apps/frontend
          npm test

  build:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        BINARY_NAME=mcp-gateway
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-w -s" -o dist/${BINARY_NAME}-${GOOS}-${GOARCH} ./apps/backend/cmd/api

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-gateway-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
